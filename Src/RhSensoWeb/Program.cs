using RhSensoWeb.Extensions;
using Serilog;

// ========================================
// CONFIGURAR SERILOG ANTES DE CRIAR O HOST
// ========================================
Log.Logger = new LoggerConfiguration()
    .ReadFrom.Configuration(new ConfigurationBuilder()
        .SetBasePath(Directory.GetCurrentDirectory())
        .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
        .AddJsonFile($"appsettings.{Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production"}.json", optional: true)
        .Build())
    .Enrich.FromLogContext()
    .Enrich.WithProperty("Application", "RhSensoWeb")
    .Enrich.WithMachineName()  // ‚úÖ AGORA FUNCIONA
    .WriteTo.Console()
    .WriteTo.File(
        path: "Logs/log-.txt",
        rollingInterval: RollingInterval.Day,
        retainedFileCountLimit: 30,
        outputTemplate: "{Timestamp:yyyy-MM-dd HH:mm:ss.fff zzz} [{Level:u3}] {Message:lj}{NewLine}{Exception}")
    .CreateLogger();

try
{
    Log.Information("========================================");
    Log.Information("üöÄ Iniciando RhSensoWeb...");
    Log.Information("üåê Ambiente: {Environment}", Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT") ?? "Production");
    Log.Information("========================================");

    var builder = WebApplication.CreateBuilder(args);

    // ========================================
    // CONFIGURAR SERILOG NO HOST
    // ========================================
    builder.Host.UseSerilog();

    // ========================================
    // CONFIGURA√á√ÉO DE SERVI√áOS
    // ========================================

    // 1Ô∏è‚É£ Adicionar Controllers com Views
    builder.Services.AddControllersWithViews();

    // 2Ô∏è‚É£ Adicionar Session
    builder.Services.AddSession(options =>
    {
        options.IdleTimeout = TimeSpan.FromHours(8);
        options.Cookie.HttpOnly = true;
        options.Cookie.IsEssential = true;
        options.Cookie.Name = "RhSensoWeb.Session";
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
        options.Cookie.SameSite = SameSiteMode.Lax;
    });

    // 3Ô∏è‚É£ Adicionar Autentica√ß√£o ‚úÖ CR√çTICO
    builder.Services.AddCustomAuthentication(builder.Configuration);

    // 4Ô∏è‚É£ Adicionar Servi√ßos da Aplica√ß√£o ‚úÖ CR√çTICO
    builder.Services.AddApplicationServices(builder.Configuration);

    // 5Ô∏è‚É£ Adicionar CORS
    builder.Services.AddCustomCors();

    // 6Ô∏è‚É£ Adicionar Compress√£o
    builder.Services.AddCustomCompression();

    // 7Ô∏è‚É£ Adicionar Cache
    builder.Services.AddCustomCaching();

    // 8Ô∏è‚É£ Adicionar Health Checks
    builder.Services.AddCustomHealthChecks(builder.Configuration);

    // 9Ô∏è‚É£ Adicionar AntiForgery
    builder.Services.AddAntiforgery(options =>
    {
        options.HeaderName = "X-CSRF-TOKEN";
        options.Cookie.Name = "RhSensoWeb.AntiForgery";
        options.Cookie.HttpOnly = true;
        options.Cookie.SecurePolicy = CookieSecurePolicy.Always;
    });

    var app = builder.Build();

    // ========================================
    // CONFIGURA√á√ÉO DO PIPELINE DE MIDDLEWARE
    // ========================================

    // 1Ô∏è‚É£ Logging estruturado
    app.UseSerilogRequestLogging(options =>
    {
        options.MessageTemplate = "HTTP {RequestMethod} {RequestPath} respondeu {StatusCode} em {Elapsed:0.0000}ms";
        options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =>
        {
            diagnosticContext.Set("RequestHost", httpContext.Request.Host.Value);
            diagnosticContext.Set("RemoteIP", httpContext.Connection.RemoteIpAddress?.ToString());
        };
    });

    // 2Ô∏è‚É£ Tratamento de erros
    if (!app.Environment.IsDevelopment())
    {
        app.UseExceptionHandler("/Home/Error");
        app.UseHsts();
        app.UseStatusCodePagesWithReExecute("/Home/Error", "?statusCode={0}");
    }
    else
    {
        app.UseDeveloperExceptionPage();
    }

    // 3Ô∏è‚É£ Seguran√ßa
    app.UseHttpsRedirection();

    // 4Ô∏è‚É£ Compress√£o
    app.UseResponseCompression();

    // 5Ô∏è‚É£ Arquivos est√°ticos
    app.UseStaticFiles();

    // 6Ô∏è‚É£ Roteamento
    app.UseRouting();

    // 7Ô∏è‚É£ CORS (se necess√°rio)
    if (app.Environment.IsDevelopment())
    {
        app.UseCors("DevelopmentPolicy");
    }

    // 8Ô∏è‚É£ Sess√£o ‚úÖ ANTES DE AUTENTICA√á√ÉO
    app.UseSession();

    // 9Ô∏è‚É£ Autentica√ß√£o
    app.UseAuthentication();

    // üîü Autoriza√ß√£o
    app.UseAuthorization();

    // 1Ô∏è‚É£1Ô∏è‚É£ Health Checks
    app.MapHealthChecks("/health");

    // 1Ô∏è‚É£2Ô∏è‚É£ Rotas das √Åreas
    app.MapControllerRoute(
        name: "areas",
        pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");

    // 1Ô∏è‚É£3Ô∏è‚É£ Rota padr√£o
    app.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");

    // ========================================
    // INICIALIZA√á√ÉO
    // ========================================
    Log.Information("‚úÖ Aplica√ß√£o iniciada com sucesso!");
    app.Run();
}
catch (Exception ex)
{
    Log.Fatal(ex, "‚ùå ERRO FATAL ao iniciar a aplica√ß√£o");
    throw;
}
finally
{
    Log.Information("üõë Encerrando RhSensoWeb...");
    Log.CloseAndFlush();
}